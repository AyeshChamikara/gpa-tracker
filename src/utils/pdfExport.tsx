
import React from 'react';
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';
import { UserData, Semester, Subject } from '../types';
import { calculateSemesterGPA, calculateOverallGPA, calculateTotalCredits } from './gpaCalculator';

// Define styles for PDF
const styles = StyleSheet.create({
  page: {
    padding: 30,
    backgroundColor: '#ffffff',
  },
  header: {
    fontSize: 18,
    marginBottom: 20,
    textAlign: 'center',
    color: '#403E43',
    fontWeight: 'bold',
  },
  subHeader: {
    fontSize: 14,
    marginVertical: 10,
    color: '#403E43',
    fontWeight: 'bold',
  },
  section: {
    marginBottom: 20,
  },
  summary: {
    marginBottom: 20,
    padding: 10,
    backgroundColor: '#f6f6f7',
  },
  semesterHeader: {
    fontSize: 12,
    fontWeight: 'bold',
    backgroundColor: '#e5deff',
    padding: 8,
    marginBottom: 8,
  },
  tableHeader: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderColor: '#8E9196',
    paddingBottom: 5,
    paddingTop: 5,
    backgroundColor: '#f1f0fb',
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 0.5,
    borderColor: '#8E9196',
    paddingBottom: 5,
    paddingTop: 5,
  },
  tableCell: {
    flex: 1,
    fontSize: 10,
    padding: 3,
  },
  tableCellWide: {
    flex: 2,
    fontSize: 10,
    padding: 3,
  },
  text: {
    fontSize: 10,
    marginBottom: 5,
  },
  boldText: {
    fontSize: 10,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 30,
    right: 30,
    textAlign: 'center',
    fontSize: 8,
    color: '#8E9196',
  },
});

// Create PDF Document component
const GPAReport = ({ userData }: { userData: UserData }) => {
  const currentDate = new Date().toLocaleDateString();
  const overallGPA = calculateOverallGPA(userData);
  const totalCredits = calculateTotalCredits(userData.semesters.flatMap(semester => semester.subjects));
  
  return (
    <Document>
      <Page size="A4" style={styles.page}>
        <Text style={styles.header}>Campus GPA Report</Text>
        
        <View style={styles.section}>
          <Text style={styles.text}>Name: {userData.name}</Text>
          <Text style={styles.text}>University: {userData.university}</Text>
          <Text style={styles.text}>Date Generated: {currentDate}</Text>
        </View>
        
        <View style={styles.summary}>
          <Text style={styles.subHeader}>Summary</Text>
          <Text style={styles.boldText}>Overall GPA: {overallGPA.toFixed(2)}</Text>
          <Text style={styles.boldText}>Total Credits: {totalCredits}</Text>
          <Text style={styles.boldText}>Total Semesters: {userData.semesters.length}</Text>
        </View>
        
        {userData.semesters.length > 0 ? (
          userData.semesters.map((semester: Semester) => (
            <View key={semester.id} style={styles.section}>
              <Text style={styles.semesterHeader}>
                {semester.year} - Semester {semester.semester} 
                (GPA: {calculateSemesterGPA(semester).toFixed(2)})
              </Text>
              
              <View style={styles.tableHeader}>
                <Text style={styles.tableCellWide}>Subject</Text>
                <Text style={styles.tableCell}>Credits</Text>
                <Text style={styles.tableCell}>Grade</Text>
              </View>
              
              {semester.subjects.length > 0 ? (
                semester.subjects.map((subject: Subject) => (
                  <View key={subject.id} style={styles.tableRow}>
                    <Text style={styles.tableCellWide}>{subject.name}</Text>
                    <Text style={styles.tableCell}>{subject.credits}</Text>
                    <Text style={styles.tableCell}>{subject.grade}</Text>
                  </View>
                ))
              ) : (
                <View style={styles.tableRow}>
                  <Text style={styles.tableCellWide}>No subjects added</Text>
                  <Text style={styles.tableCell}>-</Text>
                  <Text style={styles.tableCell}>-</Text>
                </View>
              )}
            </View>
          ))
        ) : (
          <Text style={styles.text}>No semester data available</Text>
        )}
        
        <Text style={styles.footer}>
          Generated by Campus GPA Tracker
        </Text>
      </Page>
    </Document>
  );
};

// PDF download button component
export const PDFDownloadButton = ({ userData }: { userData: UserData }) => (
  <PDFDownloadLink 
    document={<GPAReport userData={userData} />}
    fileName={`${userData.name.replace(/\s+/g, '_')}_GPA_Report.pdf`}
    style={{
      textDecoration: 'none',
    }}
  >
    {({ blob, url, loading, error }) => 
      loading ? 'Generating PDF...' : 'Download GPA Report as PDF'
    }
  </PDFDownloadLink>
);
